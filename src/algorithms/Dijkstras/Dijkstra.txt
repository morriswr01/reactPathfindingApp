// import Dijkstra from "../dijkstra";

// interface Node {
//     colID: number;
//     rowID: number;
//     isStart: boolean;
//     isVisited: boolean;
//     isFinish: boolean;
//     isWall: boolean;
//     isOnPath: boolean;
//     distance: number;
//     previousNode?: Node | null;
//     isSeen?: boolean;
//     h?: number;
//     f?: number;
// }

// test("should reject all-null initial values", () => {
    // expect(() => new Dijkstra(null, null, null)).toThrow(TypeError);
    // const startNodeTest = {
    //     colID: 0,
    //     rowID: 0,
    //     isStart: false,
    //     isFinish: false,
    //     isWall: false,
    //     isVisited: false,
    //     isOnPath: false,
    //     distance: Infinity,
    //     previousNode: null,
    //     h: Infinity,
    //     f: Infinity,
    // };

    // const finishNodeTest = {
    //     colID: 20,
    //     rowID: 26,
    //     isStart: false,
    //     isFinish: false,
    //     isWall: false,
    //     isVisited: false,
    //     isOnPath: false,
    //     distance: Infinity,
    //     previousNode: null,
    //     h: Infinity,
    //     f: Infinity,
    // };

    // const START_NODE_ROW = 10;
    // const START_NODE_COL = 5;
    // const FINISH_NODE_ROW = 10;
    // const FINISH_NODE_COL = 15;
    // const gridRows = 21;
    // const gridCols = 21;

    // const grid: Array<Array<Node>> = [];
    // for (let rowID = 0; rowID < gridRows; rowID++) {
    //     grid[rowID] = [];
    //     for (let colID = 0; colID < gridCols; colID++) {
    //         grid[rowID][colID] = {
    //             colID: colID,
    //             rowID: rowID,
    //             isStart: rowID === START_NODE_ROW && colID === START_NODE_COL,
    //             isFinish:
    //                 rowID === FINISH_NODE_ROW && colID === FINISH_NODE_COL,
    //             isWall: false,
    //             isVisited: false,
    //             isOnPath: false,
    //             distance: Infinity,
    //             previousNode: null,
    //         };
    //     }
    // }

    // expect(() => new Dijkstra(null, null, null)).toThrow(TypeError);
// });
